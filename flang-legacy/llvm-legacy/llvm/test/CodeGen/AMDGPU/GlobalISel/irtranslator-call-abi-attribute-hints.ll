; NOTE: Assertions have been autogenerated by utils/update_mir_test_checks.py
; RUN: llc -global-isel -stop-after=irtranslator -mtriple=amdgcn-amd-amdhsa -mcpu=gfx900 -verify-machineinstrs -o - %s | FileCheck -enable-var-scope %s

; Test that we don't insert code to pass implicit arguments we know
; the callee does not need.

declare hidden void @extern()

define amdgpu_kernel void @kernel_call_no_workitem_ids() {
  ; CHECK-LABEL: name: kernel_call_no_workitem_ids
  ; CHECK: bb.1 (%ir-block.0):
  ; CHECK-NEXT:   liveins: $sgpr12, $sgpr13, $sgpr14, $sgpr4_sgpr5, $sgpr6_sgpr7, $sgpr8_sgpr9
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT:   [[PRED_COPY:%[0-9]+]]:sgpr_32 = PRED_COPY $sgpr14
  ; CHECK-NEXT:   [[PRED_COPY1:%[0-9]+]]:sgpr_32 = PRED_COPY $sgpr13
  ; CHECK-NEXT:   [[PRED_COPY2:%[0-9]+]]:sgpr_32 = PRED_COPY $sgpr12
  ; CHECK-NEXT:   [[PRED_COPY3:%[0-9]+]]:sgpr_64 = PRED_COPY $sgpr8_sgpr9
  ; CHECK-NEXT:   [[PRED_COPY4:%[0-9]+]]:sgpr_64 = PRED_COPY $sgpr4_sgpr5
  ; CHECK-NEXT:   [[PRED_COPY5:%[0-9]+]]:_(p4) = PRED_COPY $sgpr6_sgpr7
  ; CHECK-NEXT:   ADJCALLSTACKUP 0, 0, implicit-def $scc
  ; CHECK-NEXT:   [[GV:%[0-9]+]]:_(p0) = G_GLOBAL_VALUE @extern
  ; CHECK-NEXT:   [[PRED_COPY6:%[0-9]+]]:_(p4) = PRED_COPY [[PRED_COPY4]]
  ; CHECK-NEXT:   [[DEF:%[0-9]+]]:_(p4) = G_IMPLICIT_DEF
  ; CHECK-NEXT:   [[PRED_COPY7:%[0-9]+]]:_(p4) = PRED_COPY [[PRED_COPY5]](p4)
  ; CHECK-NEXT:   [[C:%[0-9]+]]:_(s64) = G_CONSTANT i64 0
  ; CHECK-NEXT:   [[PTR_ADD:%[0-9]+]]:_(p4) = G_PTR_ADD [[PRED_COPY7]], [[C]](s64)
  ; CHECK-NEXT:   [[PRED_COPY8:%[0-9]+]]:_(s64) = PRED_COPY [[PRED_COPY3]]
  ; CHECK-NEXT:   [[PRED_COPY9:%[0-9]+]]:_(s32) = PRED_COPY [[PRED_COPY2]]
  ; CHECK-NEXT:   [[PRED_COPY10:%[0-9]+]]:_(s32) = PRED_COPY [[PRED_COPY1]]
  ; CHECK-NEXT:   [[PRED_COPY11:%[0-9]+]]:_(s32) = PRED_COPY [[PRED_COPY]]
  ; CHECK-NEXT:   [[DEF1:%[0-9]+]]:_(s32) = G_IMPLICIT_DEF
  ; CHECK-NEXT:   [[PRED_COPY12:%[0-9]+]]:_(<4 x s32>) = PRED_COPY $private_rsrc_reg
  ; CHECK-NEXT:   $sgpr0_sgpr1_sgpr2_sgpr3 = PRED_COPY [[PRED_COPY12]](<4 x s32>)
  ; CHECK-NEXT:   $sgpr4_sgpr5 = PRED_COPY [[PRED_COPY6]](p4)
  ; CHECK-NEXT:   $sgpr6_sgpr7 = PRED_COPY [[DEF]](p4)
  ; CHECK-NEXT:   $sgpr8_sgpr9 = PRED_COPY [[PTR_ADD]](p4)
  ; CHECK-NEXT:   $sgpr10_sgpr11 = PRED_COPY [[PRED_COPY8]](s64)
  ; CHECK-NEXT:   $sgpr12 = PRED_COPY [[PRED_COPY9]](s32)
  ; CHECK-NEXT:   $sgpr13 = PRED_COPY [[PRED_COPY10]](s32)
  ; CHECK-NEXT:   $sgpr14 = PRED_COPY [[PRED_COPY11]](s32)
  ; CHECK-NEXT:   $sgpr15 = PRED_COPY [[DEF1]](s32)
  ; CHECK-NEXT:   $sgpr30_sgpr31 = G_SI_CALL [[GV]](p0), @extern, csr_amdgpu, implicit $sgpr0_sgpr1_sgpr2_sgpr3, implicit $sgpr4_sgpr5, implicit $sgpr6_sgpr7, implicit $sgpr8_sgpr9, implicit $sgpr10_sgpr11, implicit $sgpr12, implicit $sgpr13, implicit $sgpr14, implicit $sgpr15
  ; CHECK-NEXT:   ADJCALLSTACKDOWN 0, 0, implicit-def $scc
  ; CHECK-NEXT:   S_ENDPGM 0
  call void @extern() "amdgpu-no-workitem-id-x" "amdgpu-no-workitem-id-y" "amdgpu-no-workitem-id-z"
  ret void
}

define amdgpu_kernel void @kernel_call_no_workgroup_ids() {
  ; CHECK-LABEL: name: kernel_call_no_workgroup_ids
  ; CHECK: bb.1 (%ir-block.0):
  ; CHECK-NEXT:   liveins: $vgpr0, $vgpr1, $vgpr2, $sgpr4_sgpr5, $sgpr6_sgpr7, $sgpr8_sgpr9
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT:   [[PRED_COPY:%[0-9]+]]:vgpr_32(s32) = PRED_COPY $vgpr2
  ; CHECK-NEXT:   [[PRED_COPY1:%[0-9]+]]:vgpr_32(s32) = PRED_COPY $vgpr1
  ; CHECK-NEXT:   [[PRED_COPY2:%[0-9]+]]:vgpr_32(s32) = PRED_COPY $vgpr0
  ; CHECK-NEXT:   [[PRED_COPY3:%[0-9]+]]:sgpr_64 = PRED_COPY $sgpr8_sgpr9
  ; CHECK-NEXT:   [[PRED_COPY4:%[0-9]+]]:sgpr_64 = PRED_COPY $sgpr4_sgpr5
  ; CHECK-NEXT:   [[PRED_COPY5:%[0-9]+]]:_(p4) = PRED_COPY $sgpr6_sgpr7
  ; CHECK-NEXT:   ADJCALLSTACKUP 0, 0, implicit-def $scc
  ; CHECK-NEXT:   [[GV:%[0-9]+]]:_(p0) = G_GLOBAL_VALUE @extern
  ; CHECK-NEXT:   [[PRED_COPY6:%[0-9]+]]:_(p4) = PRED_COPY [[PRED_COPY4]]
  ; CHECK-NEXT:   [[DEF:%[0-9]+]]:_(p4) = G_IMPLICIT_DEF
  ; CHECK-NEXT:   [[PRED_COPY7:%[0-9]+]]:_(p4) = PRED_COPY [[PRED_COPY5]](p4)
  ; CHECK-NEXT:   [[C:%[0-9]+]]:_(s64) = G_CONSTANT i64 0
  ; CHECK-NEXT:   [[PTR_ADD:%[0-9]+]]:_(p4) = G_PTR_ADD [[PRED_COPY7]], [[C]](s64)
  ; CHECK-NEXT:   [[PRED_COPY8:%[0-9]+]]:_(s64) = PRED_COPY [[PRED_COPY3]]
  ; CHECK-NEXT:   [[DEF1:%[0-9]+]]:_(s32) = G_IMPLICIT_DEF
  ; CHECK-NEXT:   [[PRED_COPY9:%[0-9]+]]:_(s32) = PRED_COPY [[PRED_COPY2]](s32)
  ; CHECK-NEXT:   [[PRED_COPY10:%[0-9]+]]:_(s32) = PRED_COPY [[PRED_COPY1]](s32)
  ; CHECK-NEXT:   [[C1:%[0-9]+]]:_(s32) = G_CONSTANT i32 10
  ; CHECK-NEXT:   [[SHL:%[0-9]+]]:_(s32) = G_SHL [[PRED_COPY10]], [[C1]](s32)
  ; CHECK-NEXT:   [[OR:%[0-9]+]]:_(s32) = G_OR [[PRED_COPY9]], [[SHL]]
  ; CHECK-NEXT:   [[PRED_COPY11:%[0-9]+]]:_(s32) = PRED_COPY [[PRED_COPY]](s32)
  ; CHECK-NEXT:   [[C2:%[0-9]+]]:_(s32) = G_CONSTANT i32 20
  ; CHECK-NEXT:   [[SHL1:%[0-9]+]]:_(s32) = G_SHL [[PRED_COPY11]], [[C2]](s32)
  ; CHECK-NEXT:   [[OR1:%[0-9]+]]:_(s32) = G_OR [[OR]], [[SHL1]]
  ; CHECK-NEXT:   [[PRED_COPY12:%[0-9]+]]:_(<4 x s32>) = PRED_COPY $private_rsrc_reg
  ; CHECK-NEXT:   $sgpr0_sgpr1_sgpr2_sgpr3 = PRED_COPY [[PRED_COPY12]](<4 x s32>)
  ; CHECK-NEXT:   $sgpr4_sgpr5 = PRED_COPY [[PRED_COPY6]](p4)
  ; CHECK-NEXT:   $sgpr6_sgpr7 = PRED_COPY [[DEF]](p4)
  ; CHECK-NEXT:   $sgpr8_sgpr9 = PRED_COPY [[PTR_ADD]](p4)
  ; CHECK-NEXT:   $sgpr10_sgpr11 = PRED_COPY [[PRED_COPY8]](s64)
  ; CHECK-NEXT:   $sgpr15 = PRED_COPY [[DEF1]](s32)
  ; CHECK-NEXT:   $vgpr31 = PRED_COPY [[OR1]](s32)
  ; CHECK-NEXT:   $sgpr30_sgpr31 = G_SI_CALL [[GV]](p0), @extern, csr_amdgpu, implicit $sgpr0_sgpr1_sgpr2_sgpr3, implicit $sgpr4_sgpr5, implicit $sgpr6_sgpr7, implicit $sgpr8_sgpr9, implicit $sgpr10_sgpr11, implicit $sgpr15, implicit $vgpr31
  ; CHECK-NEXT:   ADJCALLSTACKDOWN 0, 0, implicit-def $scc
  ; CHECK-NEXT:   S_ENDPGM 0
  call void @extern() "amdgpu-no-workgroup-id-x" "amdgpu-no-workgroup-id-y" "amdgpu-no-workgroup-id-z"
  ret void
}

define amdgpu_kernel void @kernel_call_no_other_sgprs() {
  ; CHECK-LABEL: name: kernel_call_no_other_sgprs
  ; CHECK: bb.1 (%ir-block.0):
  ; CHECK-NEXT:   liveins: $vgpr0, $vgpr1, $vgpr2, $sgpr6_sgpr7
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT:   [[PRED_COPY:%[0-9]+]]:vgpr_32(s32) = PRED_COPY $vgpr2
  ; CHECK-NEXT:   [[PRED_COPY1:%[0-9]+]]:vgpr_32(s32) = PRED_COPY $vgpr1
  ; CHECK-NEXT:   [[PRED_COPY2:%[0-9]+]]:vgpr_32(s32) = PRED_COPY $vgpr0
  ; CHECK-NEXT:   [[PRED_COPY3:%[0-9]+]]:_(p4) = PRED_COPY $sgpr6_sgpr7
  ; CHECK-NEXT:   ADJCALLSTACKUP 0, 0, implicit-def $scc
  ; CHECK-NEXT:   [[GV:%[0-9]+]]:_(p0) = G_GLOBAL_VALUE @extern
  ; CHECK-NEXT:   [[PRED_COPY4:%[0-9]+]]:_(p4) = PRED_COPY [[PRED_COPY3]](p4)
  ; CHECK-NEXT:   [[C:%[0-9]+]]:_(s64) = G_CONSTANT i64 0
  ; CHECK-NEXT:   [[PTR_ADD:%[0-9]+]]:_(p4) = G_PTR_ADD [[PRED_COPY4]], [[C]](s64)
  ; CHECK-NEXT:   [[DEF:%[0-9]+]]:_(s32) = G_IMPLICIT_DEF
  ; CHECK-NEXT:   [[PRED_COPY5:%[0-9]+]]:_(s32) = PRED_COPY [[PRED_COPY2]](s32)
  ; CHECK-NEXT:   [[PRED_COPY6:%[0-9]+]]:_(s32) = PRED_COPY [[PRED_COPY1]](s32)
  ; CHECK-NEXT:   [[C1:%[0-9]+]]:_(s32) = G_CONSTANT i32 10
  ; CHECK-NEXT:   [[SHL:%[0-9]+]]:_(s32) = G_SHL [[PRED_COPY6]], [[C1]](s32)
  ; CHECK-NEXT:   [[OR:%[0-9]+]]:_(s32) = G_OR [[PRED_COPY5]], [[SHL]]
  ; CHECK-NEXT:   [[PRED_COPY7:%[0-9]+]]:_(s32) = PRED_COPY [[PRED_COPY]](s32)
  ; CHECK-NEXT:   [[C2:%[0-9]+]]:_(s32) = G_CONSTANT i32 20
  ; CHECK-NEXT:   [[SHL1:%[0-9]+]]:_(s32) = G_SHL [[PRED_COPY7]], [[C2]](s32)
  ; CHECK-NEXT:   [[OR1:%[0-9]+]]:_(s32) = G_OR [[OR]], [[SHL1]]
  ; CHECK-NEXT:   [[PRED_COPY8:%[0-9]+]]:_(<4 x s32>) = PRED_COPY $private_rsrc_reg
  ; CHECK-NEXT:   $sgpr0_sgpr1_sgpr2_sgpr3 = PRED_COPY [[PRED_COPY8]](<4 x s32>)
  ; CHECK-NEXT:   $sgpr8_sgpr9 = PRED_COPY [[PTR_ADD]](p4)
  ; CHECK-NEXT:   $sgpr15 = PRED_COPY [[DEF]](s32)
  ; CHECK-NEXT:   $vgpr31 = PRED_COPY [[OR1]](s32)
  ; CHECK-NEXT:   $sgpr30_sgpr31 = G_SI_CALL [[GV]](p0), @extern, csr_amdgpu, implicit $sgpr0_sgpr1_sgpr2_sgpr3, implicit $sgpr8_sgpr9, implicit $sgpr15, implicit $vgpr31
  ; CHECK-NEXT:   ADJCALLSTACKDOWN 0, 0, implicit-def $scc
  ; CHECK-NEXT:   S_ENDPGM 0
  call void @extern() "amdgpu-no-dispatch-id" "amdgpu-no-dispatch-ptr" "amdgpu-no-queue-ptr" "amdgpu-no-workgroup-id-x" "amdgpu-no-workgroup-id-y" "amdgpu-no-workgroup-id-z"
  ret void
}

define void @func_call_no_workitem_ids() {
  ; CHECK-LABEL: name: func_call_no_workitem_ids
  ; CHECK: bb.1 (%ir-block.0):
  ; CHECK-NEXT:   liveins: $sgpr12, $sgpr13, $sgpr14, $sgpr15, $sgpr4_sgpr5, $sgpr6_sgpr7, $sgpr8_sgpr9, $sgpr10_sgpr11
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT:   [[PRED_COPY:%[0-9]+]]:sgpr_32(s32) = PRED_COPY $sgpr15
  ; CHECK-NEXT:   [[PRED_COPY1:%[0-9]+]]:sgpr_32 = PRED_COPY $sgpr14
  ; CHECK-NEXT:   [[PRED_COPY2:%[0-9]+]]:sgpr_32 = PRED_COPY $sgpr13
  ; CHECK-NEXT:   [[PRED_COPY3:%[0-9]+]]:sgpr_32 = PRED_COPY $sgpr12
  ; CHECK-NEXT:   [[PRED_COPY4:%[0-9]+]]:sgpr_64 = PRED_COPY $sgpr10_sgpr11
  ; CHECK-NEXT:   [[PRED_COPY5:%[0-9]+]]:sgpr_64 = PRED_COPY $sgpr8_sgpr9
  ; CHECK-NEXT:   [[PRED_COPY6:%[0-9]+]]:sgpr_64(p4) = PRED_COPY $sgpr6_sgpr7
  ; CHECK-NEXT:   [[PRED_COPY7:%[0-9]+]]:sgpr_64 = PRED_COPY $sgpr4_sgpr5
  ; CHECK-NEXT:   ADJCALLSTACKUP 0, 0, implicit-def $scc
  ; CHECK-NEXT:   [[GV:%[0-9]+]]:_(p0) = G_GLOBAL_VALUE @extern
  ; CHECK-NEXT:   [[PRED_COPY8:%[0-9]+]]:_(p4) = PRED_COPY [[PRED_COPY7]]
  ; CHECK-NEXT:   [[PRED_COPY9:%[0-9]+]]:_(p4) = PRED_COPY [[PRED_COPY6]](p4)
  ; CHECK-NEXT:   [[PRED_COPY10:%[0-9]+]]:_(p4) = PRED_COPY [[PRED_COPY5]]
  ; CHECK-NEXT:   [[PRED_COPY11:%[0-9]+]]:_(s64) = PRED_COPY [[PRED_COPY4]]
  ; CHECK-NEXT:   [[PRED_COPY12:%[0-9]+]]:_(s32) = PRED_COPY [[PRED_COPY3]]
  ; CHECK-NEXT:   [[PRED_COPY13:%[0-9]+]]:_(s32) = PRED_COPY [[PRED_COPY2]]
  ; CHECK-NEXT:   [[PRED_COPY14:%[0-9]+]]:_(s32) = PRED_COPY [[PRED_COPY1]]
  ; CHECK-NEXT:   [[PRED_COPY15:%[0-9]+]]:_(s32) = PRED_COPY [[PRED_COPY]](s32)
  ; CHECK-NEXT:   [[PRED_COPY16:%[0-9]+]]:_(<4 x s32>) = PRED_COPY $sgpr0_sgpr1_sgpr2_sgpr3
  ; CHECK-NEXT:   $sgpr0_sgpr1_sgpr2_sgpr3 = PRED_COPY [[PRED_COPY16]](<4 x s32>)
  ; CHECK-NEXT:   $sgpr4_sgpr5 = PRED_COPY [[PRED_COPY8]](p4)
  ; CHECK-NEXT:   $sgpr6_sgpr7 = PRED_COPY [[PRED_COPY9]](p4)
  ; CHECK-NEXT:   $sgpr8_sgpr9 = PRED_COPY [[PRED_COPY10]](p4)
  ; CHECK-NEXT:   $sgpr10_sgpr11 = PRED_COPY [[PRED_COPY11]](s64)
  ; CHECK-NEXT:   $sgpr12 = PRED_COPY [[PRED_COPY12]](s32)
  ; CHECK-NEXT:   $sgpr13 = PRED_COPY [[PRED_COPY13]](s32)
  ; CHECK-NEXT:   $sgpr14 = PRED_COPY [[PRED_COPY14]](s32)
  ; CHECK-NEXT:   $sgpr15 = PRED_COPY [[PRED_COPY15]](s32)
  ; CHECK-NEXT:   $sgpr30_sgpr31 = G_SI_CALL [[GV]](p0), @extern, csr_amdgpu, implicit $sgpr0_sgpr1_sgpr2_sgpr3, implicit $sgpr4_sgpr5, implicit $sgpr6_sgpr7, implicit $sgpr8_sgpr9, implicit $sgpr10_sgpr11, implicit $sgpr12, implicit $sgpr13, implicit $sgpr14, implicit $sgpr15
  ; CHECK-NEXT:   ADJCALLSTACKDOWN 0, 0, implicit-def $scc
  ; CHECK-NEXT:   SI_RETURN
  call void @extern() "amdgpu-no-workitem-id-x" "amdgpu-no-workitem-id-y" "amdgpu-no-workitem-id-z"
  ret void
}

define void @func_call_no_workgroup_ids() {
  ; CHECK-LABEL: name: func_call_no_workgroup_ids
  ; CHECK: bb.1 (%ir-block.0):
  ; CHECK-NEXT:   liveins: $sgpr15, $vgpr31, $sgpr4_sgpr5, $sgpr6_sgpr7, $sgpr8_sgpr9, $sgpr10_sgpr11
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT:   [[PRED_COPY:%[0-9]+]]:vgpr_32(s32) = PRED_COPY $vgpr31
  ; CHECK-NEXT:   [[PRED_COPY1:%[0-9]+]]:sgpr_32(s32) = PRED_COPY $sgpr15
  ; CHECK-NEXT:   [[PRED_COPY2:%[0-9]+]]:sgpr_64 = PRED_COPY $sgpr10_sgpr11
  ; CHECK-NEXT:   [[PRED_COPY3:%[0-9]+]]:sgpr_64 = PRED_COPY $sgpr8_sgpr9
  ; CHECK-NEXT:   [[PRED_COPY4:%[0-9]+]]:sgpr_64(p4) = PRED_COPY $sgpr6_sgpr7
  ; CHECK-NEXT:   [[PRED_COPY5:%[0-9]+]]:sgpr_64 = PRED_COPY $sgpr4_sgpr5
  ; CHECK-NEXT:   ADJCALLSTACKUP 0, 0, implicit-def $scc
  ; CHECK-NEXT:   [[GV:%[0-9]+]]:_(p0) = G_GLOBAL_VALUE @extern
  ; CHECK-NEXT:   [[PRED_COPY6:%[0-9]+]]:_(p4) = PRED_COPY [[PRED_COPY5]]
  ; CHECK-NEXT:   [[PRED_COPY7:%[0-9]+]]:_(p4) = PRED_COPY [[PRED_COPY4]](p4)
  ; CHECK-NEXT:   [[PRED_COPY8:%[0-9]+]]:_(p4) = PRED_COPY [[PRED_COPY3]]
  ; CHECK-NEXT:   [[PRED_COPY9:%[0-9]+]]:_(s64) = PRED_COPY [[PRED_COPY2]]
  ; CHECK-NEXT:   [[PRED_COPY10:%[0-9]+]]:_(s32) = PRED_COPY [[PRED_COPY1]](s32)
  ; CHECK-NEXT:   [[PRED_COPY11:%[0-9]+]]:_(s32) = PRED_COPY [[PRED_COPY]](s32)
  ; CHECK-NEXT:   [[PRED_COPY12:%[0-9]+]]:_(<4 x s32>) = PRED_COPY $sgpr0_sgpr1_sgpr2_sgpr3
  ; CHECK-NEXT:   $sgpr0_sgpr1_sgpr2_sgpr3 = PRED_COPY [[PRED_COPY12]](<4 x s32>)
  ; CHECK-NEXT:   $sgpr4_sgpr5 = PRED_COPY [[PRED_COPY6]](p4)
  ; CHECK-NEXT:   $sgpr6_sgpr7 = PRED_COPY [[PRED_COPY7]](p4)
  ; CHECK-NEXT:   $sgpr8_sgpr9 = PRED_COPY [[PRED_COPY8]](p4)
  ; CHECK-NEXT:   $sgpr10_sgpr11 = PRED_COPY [[PRED_COPY9]](s64)
  ; CHECK-NEXT:   $sgpr15 = PRED_COPY [[PRED_COPY10]](s32)
  ; CHECK-NEXT:   $vgpr31 = PRED_COPY [[PRED_COPY11]](s32)
  ; CHECK-NEXT:   $sgpr30_sgpr31 = G_SI_CALL [[GV]](p0), @extern, csr_amdgpu, implicit $sgpr0_sgpr1_sgpr2_sgpr3, implicit $sgpr4_sgpr5, implicit $sgpr6_sgpr7, implicit $sgpr8_sgpr9, implicit $sgpr10_sgpr11, implicit $sgpr15, implicit $vgpr31
  ; CHECK-NEXT:   ADJCALLSTACKDOWN 0, 0, implicit-def $scc
  ; CHECK-NEXT:   SI_RETURN
  call void @extern() "amdgpu-no-workgroup-id-x" "amdgpu-no-workgroup-id-y" "amdgpu-no-workgroup-id-z"
  ret void
}

define void @func_call_no_other_sgprs() {
  ; CHECK-LABEL: name: func_call_no_other_sgprs
  ; CHECK: bb.1 (%ir-block.0):
  ; CHECK-NEXT:   liveins: $sgpr15, $vgpr31, $sgpr8_sgpr9
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT:   [[PRED_COPY:%[0-9]+]]:vgpr_32(s32) = PRED_COPY $vgpr31
  ; CHECK-NEXT:   [[PRED_COPY1:%[0-9]+]]:sgpr_32(s32) = PRED_COPY $sgpr15
  ; CHECK-NEXT:   [[PRED_COPY2:%[0-9]+]]:sgpr_64 = PRED_COPY $sgpr8_sgpr9
  ; CHECK-NEXT:   ADJCALLSTACKUP 0, 0, implicit-def $scc
  ; CHECK-NEXT:   [[GV:%[0-9]+]]:_(p0) = G_GLOBAL_VALUE @extern
  ; CHECK-NEXT:   [[PRED_COPY3:%[0-9]+]]:_(p4) = PRED_COPY [[PRED_COPY2]]
  ; CHECK-NEXT:   [[PRED_COPY4:%[0-9]+]]:_(s32) = PRED_COPY [[PRED_COPY1]](s32)
  ; CHECK-NEXT:   [[PRED_COPY5:%[0-9]+]]:_(s32) = PRED_COPY [[PRED_COPY]](s32)
  ; CHECK-NEXT:   [[PRED_COPY6:%[0-9]+]]:_(<4 x s32>) = PRED_COPY $sgpr0_sgpr1_sgpr2_sgpr3
  ; CHECK-NEXT:   $sgpr0_sgpr1_sgpr2_sgpr3 = PRED_COPY [[PRED_COPY6]](<4 x s32>)
  ; CHECK-NEXT:   $sgpr8_sgpr9 = PRED_COPY [[PRED_COPY3]](p4)
  ; CHECK-NEXT:   $sgpr15 = PRED_COPY [[PRED_COPY4]](s32)
  ; CHECK-NEXT:   $vgpr31 = PRED_COPY [[PRED_COPY5]](s32)
  ; CHECK-NEXT:   $sgpr30_sgpr31 = G_SI_CALL [[GV]](p0), @extern, csr_amdgpu, implicit $sgpr0_sgpr1_sgpr2_sgpr3, implicit $sgpr8_sgpr9, implicit $sgpr15, implicit $vgpr31
  ; CHECK-NEXT:   ADJCALLSTACKDOWN 0, 0, implicit-def $scc
  ; CHECK-NEXT:   SI_RETURN
  call void @extern() "amdgpu-no-dispatch-id" "amdgpu-no-dispatch-ptr" "amdgpu-no-queue-ptr" "amdgpu-no-workgroup-id-x" "amdgpu-no-workgroup-id-y" "amdgpu-no-workgroup-id-z"
  ret void
}
